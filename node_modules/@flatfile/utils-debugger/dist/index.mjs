// src/debugger.ts
import c from "ansi-colors";

// src/format.time.ts
function formatTime(_date) {
  const date = new Date(_date);
  const hours = (date.getHours() + 11) % 12 + 1;
  const minutes = date.getMinutes().toString().padStart(2, "0");
  const seconds = date.getSeconds().toString().padStart(2, "0");
  const milliseconds = date.getMilliseconds().toString().padStart(3, "0");
  const ampm = date.getHours() >= 12 ? "PM" : "AM";
  return `${hours}:${minutes}:${seconds}.${milliseconds} ${ampm}`;
}

// src/simplify.args.ts
function simplifyArgs(args) {
  if (!Array.isArray(args)) {
    args = [args];
  }
  return args.map((arg) => {
    if (typeof arg === "string") {
      return arg.length > 15 ? arg.substring(0, 12).trimEnd() + "..." : arg;
    }
    if (typeof arg === "number" || typeof arg === "boolean") {
      return arg;
    }
    if (typeof arg === "object" && arg !== null) {
      return `Object<${Object.keys(arg).length} keys>`;
    }
    return String(arg);
  });
}

// src/debugger.ts
var Debugger = class {
  static logHttpRequest({
    method,
    url,
    statusCode,
    headers,
    startTime,
    error = false
  }) {
    const endTime = /* @__PURE__ */ new Date();
    const timeDiff = endTime.getTime() - startTime.getTime();
    const ml = method.length;
    method = method.toUpperCase();
    switch (method) {
      case "GET":
        method = c.white.bgGreenBright(method);
        break;
      case "POST":
        method = c.white.bgBlueBright(method);
        break;
      case "PUT":
        method = c.white.bgYellowBright(method);
        break;
      case "DELETE":
        method = c.white.bgRedBright(method);
        break;
      default:
        method = c.white.bgBlackBright(method);
    }
    const requestId = headers["x-request-id"]?.split("-")[0] || "";
    const statusCodeColor = statusCode >= 200 && statusCode < 400 ? c.green(statusCode.toString()) : c.red(statusCode.toString());
    const status = !error ? Icon.Success : Icon.Error;
    const logString = `  ${status} ${c.white.gray(
      (timeDiff.toString() + "ms").padEnd(10)
    )} ${method}${" ".repeat(6 - ml)} ${statusCodeColor} ${c.white.bgYellow(
      url
    )} ${c.gray(requestId)}`;
    this.log(() => logString);
  }
  static logEventSubscriber(query, filter) {
    this.log(
      ({ gray, white }) => `${gray.bold(" \u21B3 on(")}${white.magentaBright(
        Array.isArray(query) ? query.join(", ") : query
      )}, ${JSON.stringify(filter)}${gray.bold(")")}`
    );
  }
  static logEvent(e) {
    this.log(
      ({ black, gray }) => `${black.bgMagentaBright(` \u25B6 ${e.topic} `)} ${formatTime(
        e.createdAt
      )} ${gray(e.id)}`
    );
  }
  static logInfo(message) {
    this.log(({ blue }) => `  ${Icon.Info}\uFE0F ${blue(message)}`);
  }
  static logWarning(message) {
    this.log(({ yellow }) => `  ${Icon.Warning}\uFE0F ${yellow(message)}`);
  }
  static logSuccess(message) {
    this.log(({ green }) => `  ${Icon.Success} ${green(message)}`);
  }
  static logError(message, label, prefix) {
    this.log(
      ({ redBright, bgRedBright, bgYellow }) => `  \u{1F534} ${bgYellow.black(prefix || "Error")}${label ? `:${bgRedBright.black(label)}` : ""} ${redBright(message || "Error")}`
    );
  }
  static logMethod(method, args, result, success, startTime) {
    const endTime = performance.now();
    const status = success ? c.green("\u2713") : c.red("\u2717");
    console.log(
      `  ${status} ${c.gray(
        ((endTime - startTime).toFixed(2) + "ms").padEnd(10)
      )} ${c.magentaBright(`${method}(`)}${prettyLog(args)}${c.magentaBright(
        ")"
      )} => ${prettyLog(result)}`
    );
  }
  static log(cb) {
    const line = cb(c);
    console.log(line);
  }
};
function prettyLog(src) {
  if (src === void 0) {
    return c.white.bold("void");
  }
  const args = simplifyArgs(src);
  return args.map((arg) => {
    if (typeof arg === "string") {
      return c.cyan(arg);
    }
    if (typeof arg === "number") {
      return c.yellow(arg.toString());
    }
    if (typeof arg === "boolean") {
      return c.magenta(arg.toString());
    }
    return c.white(arg);
  }).join(", ");
}
var Icon = {
  Success: c.green("\u2713"),
  Error: c.red("\u2717"),
  Info: c.blue("\u2139"),
  Warning: c.yellow("\u26A0")
};

// src/axios.interceptor.ts
function axiosInterceptor(axios) {
  axios.interceptors.request.use((request) => {
    request.metadata = { startTime: /* @__PURE__ */ new Date() };
    return request;
  });
  axios.interceptors.response.use(
    (response) => {
      Debugger.logHttpRequest({
        method: response.config.method,
        url: response.config.url,
        statusCode: response.status,
        headers: response.headers,
        // @ts-ignore
        startTime: response.config.metadata.startTime
      });
      return response;
    },
    (error) => {
      Debugger.logHttpRequest({
        method: error.config.method,
        url: error.config.url,
        statusCode: error.status || 0,
        headers: error.headers,
        startTime: error.config.metadata.startTime,
        error: true
      });
      return Promise.reject(error);
    }
  );
}

// src/debug.method.ts
function DebugMethod() {
  return function(target, propertyKey, descriptor) {
    const originalMethod = descriptor.value;
    function logResult(args, startTime, result, success, error) {
      Debugger.logMethod(propertyKey, args, result, success, startTime);
      if (process.env.DEBUG_LEVEL === "verbose") {
        console.log(`Input to ${propertyKey}:`);
        console.dir(arguments);
        console.log(`Output of ${propertyKey}:`);
        console.dir(result);
        if (error) {
          console.log(`Error in ${propertyKey}:`);
          console.error(error);
        }
      }
    }
    descriptor.value = function(...args) {
      const startTime = performance.now();
      try {
        const result = originalMethod.apply(this, args);
        if (result instanceof Promise) {
          return result.then((res) => {
            logResult(args, startTime, res, true);
            return res;
          }).catch((err) => {
            logResult(args, startTime, null, false, err);
            throw err;
          });
        } else {
          logResult(args, startTime, result, true);
          return result;
        }
      } catch (err) {
        logResult(args, startTime, null, false, err);
        throw err;
      }
    };
    return descriptor;
  };
}
export {
  DebugMethod,
  Debugger,
  axiosInterceptor,
  prettyLog
};
